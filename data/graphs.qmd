# Graphs Creation

Calling our Pre-processed Data
```{r}
library(tidyverse) 
library(dplyr)  

avatar <- read.csv("avatar_data.csv", header = TRUE) 
avatar 
```

```{r}
avatar_character <- avatar |>
  select(book, chapter, chapter_num, character, character_words) 

head(avatar_character)
```


Graphs for characters dialogue throughout show
```{r}
# For this data, I am going to remove data that have same character_word as I 
# don't want to double word count. Also, because we are not working with scene 
# description, it should be okay 
# https://www.datanovia.com/en/lessons/identify-and-remove-duplicate-data-in-r

unique_avatar_character <- avatar_character[!duplicated(avatar_character), ]  
unique_avatar_character
```

```{r}
# This data contains the amount of dialogue for each character throughout  
# entirety of show 
character_dialogue <- unique_avatar_character |> 
  group_by(character) |> 
  summarise(frequency = n()) |> 
  arrange(desc(frequency)) |> 
  ungroup()

character_dialogue
```

```{r} 
# Get the top 10 character
top10_character_dialogue <- character_dialogue |> 
  head(10) |> 
  select(character)  

top10_character_dialogue
```

```{r}
# devtools::install_github("Ryo-N7/tvthemes")
```


```{r}  
library(tvthemes)
library(ggplot2) 
# import_avatar()
# library(extrafont) 
# loadfonts() 
# https://ryo-n7.github.io/tvthemes/articles/examples.html 

top10_character_dialogue_graph <- 
  character_dialogue |> 
  head(10) |>  
  ggplot(aes(y = fct_reorder(character, frequency), 
             x = frequency)) +
  geom_col(fill = "#a1785c") + 
  # ylab("") + 
  labs(title = "Top 10 Characters with the Most Lines", 
       x = "# of Lines", 
       y = "Characters") +  
  scale_x_continuous(breaks = seq(0, max(character_dialogue$frequency), 
                                  by = 200)) +  
  theme_avatar()

top10_character_dialogue_graph 

ggsave("../images/graphs/top10_character_dialogue.png", 
       plot = top10_character_dialogue_graph)

```


Graph to see top 10 character dialogue changes/fluctuate per book 
```{r} 
# Get the top 10 character dialogue per book
character_dialogue_per_book <- 
  unique_avatar_character |>
  group_by(book, character) |>
  summarise(frequency = n()) |> 
  ungroup() |>
  arrange(book, desc(frequency)) 

character_dialogue_per_book
```

```{r} 
# This gets all combination of book with top 10 characters
all_combinations <- expand.grid(book = unique(unique_avatar_character$book),
                                character = top10_character_dialogue$character)

# all_combinations 
```

```{r}
# This helps if one of the top 10 character did appear or talk until later in 
# the book. Thus, if this is the case set them to 0 for books they do not talk 
# or appear in 
# https://tidyr.tidyverse.org/reference/replace_na.html 

top10_character_dialogue_per_book <-
  all_combinations |>
  left_join(character_dialogue_per_book, by = c("book", "character")) |> 
  replace_na(list(frequency = 0))
  # group_by(book, character)

top10_character_dialogue_per_book 
```

```{r}
# Add labels at the end of each line
end_labels <- top10_character_dialogue_per_book |>
  group_by(character) |>
  filter(frequency == max(frequency)) |>
  ungroup() 

end_labels
```


```{r}
library(RColorBrewer) 
library(ggrepel)  

top10_character_dialogue_per_book_graph <-
  ggplot(top10_character_dialogue_per_book,
         aes(x = fct_relevel(book, "Water"),
             y = frequency, group = character)) +
  geom_line(aes(color = character)) +
  # geom_text_repel(
  #   data = end_labels,
  #   aes(label = character),
  #   size = 3, 
  #   direction = "y", 
  #   hjust = "right",  
  #   nudge_x = 1
  # ) +
  # scale_colour_brewer(palette = "Set3") +
  # scale_color_avatar(palette = "AirNomads") +
  # scale_y_continuous(breaks = seq(0, max(top10_character_dialogue_per_book$frequency),
  #                                 by = 50)) +
  
  labs(title = "Top 10 Characters with the Most Lines per Book Chapter",
       x = "Book Chapter",
       y = "Character Line Frequency") +
  theme_avatar()  
  # theme(legend.position = "none")
  # theme()

top10_character_dialogue_per_book_graph
# 
ggsave("../images/graphs/top10_character_dialogue_per_book.png",
       plot = top10_character_dialogue_per_book_graph)
```


Graph to see the top 10 characters with Most Dialogue/Line and see how many 
episodes they appear in  
```{r}
# Jet has that many lines even though he only appeared once? Never mind, by 
# filtering it seems like he appears more than just once since I recall him 
# only appearing in his "Jet" episode

# unique_avatar_character |> 
#   filter(character == "Jet") |> 
#   distinct(chapter) |> 
#   print()
```

```{r}
top10_character_episode_appearance <- 
  unique_avatar_character |> 
  filter(character %in% top10_character_dialogue$character) |>
  distinct(character, chapter) |> 
  count(character) |> 
  rename(episode_appearance = n) 

top10_character_episode_appearance
```

```{r} 
top10_character_episode_appearance_graph <-  
  top10_character_episode_appearance |>
  ggplot(aes(x = episode_appearance,
             y = fct_reorder(character, episode_appearance))) + 
  geom_col(fill = "#a1785c") + 
  # scale_x_continuous(breaks = seq(0, max(top10_character_episode_appearance$episode_appearance),
  #                               by = 5)) + 
  labs(title = "Top 10 Characters and Their Episode Appearances", 
       x = "Episode Appearances", 
       y = "Character") + 
  theme_avatar() 

top10_character_episode_appearance_graph 

ggsave("../images/graphs/top10_character_episode_appearance.png", 
       plot = top10_character_episode_appearance_graph) 
```


Graph to see IMDb rating of each episodes per season 
```{r}
avatar_show_imdb_rating_unique <- avatar |>
  select(book, book_num, chapter, chapter_num, imdb_rating) |> 
  distinct(book, chapter, chapter_num, imdb_rating) 

avatar_show_imdb_rating_unique
```

```{r}
avatar_show_imdb_rating_unique$book <-
  fct_relevel(avatar_show_imdb_rating_unique$book, "Water")
```

```{r} 
# Used geom path to hopefully show gap of missing but sadly the missing is the 
# last episode 
# https://stackoverflow.com/questions/26140004/how-to-plot-na-gaps-using-ggplot2 

avatar_show_imdb_rating_per_book_graph <-  
  avatar_show_imdb_rating_unique |>  
  ggplot(aes(x = chapter_num, 
             y = imdb_rating)) +
  geom_path() +  
  geom_point(color = "#a1785c") +
  scale_y_continuous(limits = c(6.5, 10), breaks = seq(6.5, 10, by = 0.5)) +
  labs(title = "IMDb Rating of Each Episode Per Book Chapter", 
       y = "IMDb Rating", 
       x = "Episodes") +
  theme_avatar() +
  facet_wrap(~ book)  

avatar_show_imdb_rating_per_book_graph 

ggsave("../images/graphs/avatar_show_imdb_rating_per_book.png", 
       plot = avatar_show_imdb_rating_per_book_graph) 
```


Graph to see IMDb rating of all episode throughout show and their corresponding 
book
```{r}
avatar_show_imdb_rating_unique$chapter <- fct_reorder(
  as_factor(avatar_show_imdb_rating_unique$chapter), 
  avatar_show_imdb_rating_unique$imdb_rating, 
  .na_rm = FALSE
) 

# levels(avatar_show_imdb_rating_unique$chapter) 

# Make the episode with NA the first
avatar_show_imdb_rating_unique$chapter = fct_relevel(
  avatar_show_imdb_rating_unique$chapter, "The Siege of the North, Part 2") 

# levels(avatar_show_imdb_rating_unique$chapter) 
```

```{r}
levels(avatar_show_imdb_rating_unique$book)
```

```{r}
# For some reason I had to manually revert it back to the original level order 
# as it did not work properly with the modified level order. I suspect this is 
# because of how color is working with theme_avatar but not 100% sure 

avatar_show_imdb_rating_unique$book <- 
  fct_relevel(avatar_show_imdb_rating_unique$book, "Fire", "Earth", "Water") 

levels(avatar_show_imdb_rating_unique$book)
```

```{r, fig.width=12, fig.height=7} 
avatar_show_imdb_rating_all_episode_graph <-  
  avatar_show_imdb_rating_unique |>  
  ggplot(aes(x = imdb_rating, 
             y = chapter, colour = book)) +
  geom_point() +    
  labs(title = "IMDb Ratings of All Episodes Ranked", 
       x = "IMDb Rating", 
       y = "Episode Name") +
  theme_avatar() 

avatar_show_imdb_rating_all_episode_graph 

ggsave("../images/graphs/avatar_show_imdb_rating_all_episode.png", 
       plot = avatar_show_imdb_rating_all_episode_graph) 
```

```{r}
rating_character <- avatar |>
  select(chapter, chapter_num, character,imdb_rating)

#rating_character$book<-factor(rating_character$book,levels = c("Water","Earth","Fire"))

rating_character<-rating_character |> group_by(chapter,character, imdb_rating) |>
  summarise(participations=n(),.groups = 'keep')

main_cast <- c('Aang', 'Sokka', 'Katara', 'Zuko', 'Toph')

rating_character |> group_by(character) |> summarise(mean_participations=mean(participations)) |> 
  filter(character %in% main_cast)

```


```{r}
min_participations = 15

rating_character <- rating_character |> filter(participations>=min_participations)

rating_character <- rating_character |> group_by(character) |>
  summarise(mean_rating=mean(imdb_rating,na.rm = T),n_chapters=n()) |> 
  arrange(desc(mean_rating))

rating_character<-rating_character |> drop_na()

rating_character
```

```{r,fig.width=9, fig.height=7}
average_ratings_character <-  
  rating_character |> filter(n_chapters>1) |>  
  ggplot(aes(x = mean_rating, 
             y = fct_reorder(character, mean_rating, .desc = FALSE), 
             size = n_chapters,
             #shape = n_chapters
             )) +
  geom_point(colour="#a1785c") +
  #scale_shape_binned(breaks = c(10, 20, 30,40, 50), guide = guide_legend(reverse = FALSE)) +
  labs(title = "Average Ratings for Characters with Over 15 Appearances Per Episodes", 
       x = "IMDb Rating", 
       y = "Character",
       size = "Number of Episodes") +
  theme_avatar() 

average_ratings_character 

ggsave("../images/graphs/average_ratings_character.png", 
       plot = average_ratings_character) 
```
Option 2 changing shapes:
```{r}
average_ratings_character <-  
  rating_character |> filter(n_chapters>1) |>  
  ggplot(aes(x = mean_rating, 
             y = fct_reorder(character, mean_rating, .desc = FALSE), 
             #size = n_chapters,
             shape = n_chapters
             )) +
  geom_point(colour="#a1785c",size=3) +
  scale_shape_binned(breaks = c(10, 20, 30,40, 50,60)) +
  labs(title = "Average Ratings for Characters with Over 15 Appearances Per Episodes", 
       x = "IMDb Rating", 
       y = "Character",
       shape = "Number of Episodes") +
  theme_avatar() 

average_ratings_character 

ggsave("../images/graphs/average_ratings_character_shape.png", 
       plot = average_ratings_character) 
```
Option 3:
```{r}
average_ratings_character <-  
  rating_character |> filter(n_chapters>1) |>  
  ggplot(aes(x = mean_rating, 
             y = fct_reorder(character, mean_rating, .desc = FALSE), 
             size = n_chapters,
             #shape = n_chapters
             )) +
  geom_point(colour="#a1785c") +
  #scale_shape_binned(breaks = c(10, 20, 30,40, 50,60)) +
  geom_text(aes(label = n_chapters), 
            hjust = -0.8, 
            size = 3) + 
  labs(title = "Average Ratings for Characters with Over 15 Appearances Per Episodes", 
       x = "IMDb Rating", 
       y = "Character",
       size = "Number of Episodes",
       caption = "Numbers next to points represent the number of episodes") +
  theme_avatar()+
  theme(legend.position = "None")

average_ratings_character 

ggsave("../images/graphs/average_ratings_character_label.png", 
       plot = average_ratings_character) 
```

```{r}
rating_character |> filter(n_chapters>1) |> arrange(desc(mean_rating))
```


Graph to see how often each of the main cast interact with one another  
(We can probably use this data for our D3 graph where can let user hover each 
main character to see amount of interaction with other main character)

```{r}
character_interaction <- 
  unique_avatar_character |> 
  select(book, character, character_words) 

character_interaction
```

```{r}
# This is our interpretation of who we believe are truly the main characters 
# for this show while the others are supporting characters 
main_cast <- c('Aang', 'Sokka', 'Katara', 'Zuko', 'Toph')
main_cast
```

```{r}
# Following code below was from the help of GPT  

# Create a single regex pattern for main cast members
main_cast_pattern <- paste0("\\b(", paste(main_cast, collapse = "|"), ")\\b")

# Process interactions
interaction_counts <- character_interaction |>
  mutate(mentioned = str_extract_all(character_words, main_cast_pattern)) |>  
  unnest(mentioned) |>
  filter(character %in% main_cast, mentioned %in% main_cast, character != mentioned) |> 
  mutate(pair = pmap_chr(list(character, mentioned), ~ paste(sort(c(...)), collapse = " - "))) |> 
  count(pair, name = "frequency") |>
  separate(pair, into = c("character1", "character2"), sep = " - ") 

interaction_counts
```
The problem with this approach is that some characters can have interaction without explicitly saying the other character name. And in some cases, the character can use a nickname. To solve this problem, we will measure interaction between characters if they share a scene.

```{r}
avatar_scene <- read.csv("avatar_data_scene.csv", header = TRUE) 
avatar_character_scene <- avatar_scene |>
  select(book, chapter, chapter_num, character, character_words,scene_id) 

unique_avatar_character_scene <- avatar_character_scene[!duplicated(avatar_character_scene), ]

unique_avatar_character_scene |> head()
```

```{r}
unique_avatar_character_scene <- unique_avatar_character_scene %>%
  group_by(scene_id) %>%
  mutate(
    scene_characters = paste(sort(unique(character[!is.na(character)])), collapse = ", "),
    num_characters_scene=length(unique(character[!is.na(character)]))) %>%
  ungroup()
unique_avatar_character_scene |> head()
```
```{r}
unique_avatar_character_scene$book <-
  fct_relevel(unique_avatar_character_scene$book, "Water")
unique_avatar_character_scene |> head()
```



```{r}
# this data frame measure the interactions between characters where a set of character have an interaction if they share a scene 
# entirety of show 
interactions <- unique_avatar_character_scene |> 
  group_by(scene_characters,num_characters_scene) |> 
  summarise(frequency = n(),.groups = 'drop') |> 
  arrange(desc(frequency)) |> 
  ungroup()

interactions
```
```{r}
top10_interactions_graph <- 
  interactions |> filter(num_characters_scene>1) |> 
  head(10) |>  
  ggplot(aes(y = fct_reorder(scene_characters, frequency), 
             x = frequency)) +
  geom_col(fill = "#a1785c") + 
  # ylab("") + 
  labs(title = "Top 10 Interactions Throughout Entire Show", 
       x = "# of Scenes", 
       y = "Characters") +  
  scale_x_continuous(breaks = seq(0, max(interactions$frequency), 
                                  by = 200)) +  
  theme_avatar()

top10_interactions_graph 

ggsave("../images/graphs/top10_interactions.png", 
       plot = top10_interactions_graph)
```
```{r}
interactions |> filter(num_characters_scene>1) |> 
  head(10) 
```


```{r}
### Top charcters with the most solo Scenes
top10_characters_solo_scene <- 
  interactions |> filter(num_characters_scene==1) |> 
  head(10) |>  
  ggplot(aes(y = fct_reorder(scene_characters, frequency), 
             x = frequency)) +
  geom_col(fill = "#a1785c") + 
  # ylab("") + 
  labs(title = "Top Characters with the Most Solo Scenes", 
       x = "# of Scenes", 
       y = "Character")+  
  theme_avatar()

top10_characters_solo_scene 

ggsave("../images/graphs/top10_character_solo_scene.png", 
       plot = top10_characters_solo_scene)
```
```{r}
unique_avatar_character_scene |> filter(character=='Piandao',num_characters_scene==1)
unique_avatar_character_scene |> filter(chapter=="Sokka's Master") 
```
```{r}
unique_avatar_character_scene |> filter(character=='Roku',num_characters_scene==1)
```


This graph is not very different from the "Top 10 characters with most number of lines". We can notice, that in here appears new characters like, Piandao and Roku, while, Jet and Suki, disappeared.

```{r}
### Top interactions per book
interactions_book <- unique_avatar_character_scene |> 
  group_by(scene_characters,num_characters_scene, book) |> 
  summarise(frequency = n(),.groups = 'drop') |> 
  arrange(book,desc(frequency)) |> 
  ungroup()

interactions_book

```

```{r}
filtered_dataframe <- 
  interactions_book |> filter(num_characters_scene>1) |> 
  group_by(book) |> 
  slice_max(order_by = frequency, n = 10, with_ties = FALSE) %>%
  ungroup()

filtered_dataframe

```
```{r}
#Top 10 interactions per book
top10_interactions_graph_book <- 
  filtered_dataframe |>   
  ggplot(aes(y = fct_reorder(scene_characters, frequency), 
             x = frequency)) +
  geom_col(aes(fill=book)) + 
  # ylab("") + 
  labs(title = "Top 10 Interactions per Book", 
       x = "# of Scenes", 
       y = "Characters") +
  facet_wrap(~ book)+
  scale_fill_manual(values=c("#6798DE","#73B067","#EA666D"))+
  theme_avatar()

top10_interactions_graph_book 

ggsave("../images/graphs/top10_interactions_book.png", 
       plot = top10_interactions_graph_book)
```

Counting interactions per character with other characters (It could be the data we use in our D3 graph)

Saving data for the d3 plot
<<<<<<< HEAD
```{r}
variable <- "Aang"
including_main_characters <- F

scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable) |> 
  select(character,scene_id) |> distinct()

if(!including_main_characters){
  data <- data |> filter(!(character %in% main_cast))
}


data <- data |> 
  group_by(character) |> 
  summarise(value = n()) |> 
  arrange(desc(value)) |> 
  ungroup() |> head(10)

data['color']='#6798DE'
data

write.csv(data, "Aang.csv", row.names = FALSE)
```
```{r}
variable <- "Katara"
including_main_characters <- F

scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable) |> 
  select(character,scene_id) |> distinct()

if(!including_main_characters){
  data <- data |> filter(!(character %in% main_cast))
}


data <- data |> 
  group_by(character) |> 
  summarise(value = n()) |> 
  arrange(desc(value)) |> 
  ungroup() |> head(10)

data['color']='#3699B1'
data

write.csv(data, "Katara.csv", row.names = FALSE)
```
```{r}
variable <- "Sokka"
including_main_characters <- F

scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable) |> 
  select(character,scene_id) |> distinct()

if(!including_main_characters){
  data <- data |> filter(!(character %in% main_cast))
}


data <- data |> 
  group_by(character) |> 
  summarise(value = n()) |> 
  arrange(desc(value)) |> 
  ungroup() |> head(10)

data['color']='#a1785c'
data

write.csv(data, "Sokka.csv", row.names = FALSE)
```

```{r}
variable <- "Toph"
including_main_characters <- F

scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable) |> 
  select(character,scene_id) |> distinct()

if(!including_main_characters){
  data <- data |> filter(!(character %in% main_cast))
}


data <- data |> 
  group_by(character) |> 
  summarise(value = n()) |> 
  arrange(desc(value)) |> 
  ungroup() |> head(10)

data['color']='#73B067'
data

write.csv(data, "Toph.csv", row.names = FALSE)
```

```{r}
variable <- "Zuko"
including_main_characters <- F

scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable) |> 
  select(character,scene_id) |> distinct()

if(!including_main_characters){
  data <- data |> filter(!(character %in% main_cast))
}


data <- data |> 
  group_by(character) |> 
  summarise(value = n()) |> 
  arrange(desc(value)) |> 
  ungroup() |> head(10)


data['color']='#EA666D'
data

write.csv(data, "Zuko.csv", row.names = FALSE)

```



Alluvia for interactions


```{r}
cast <- main_cast |> append("Iroh")
data_alluvia<-data.frame(character_1=character(),
                         character_2=character(),
                         book=factor(),
                         frequency=integer())
for (variable in cast) {
  scene_character <- unique_avatar_character_scene |> filter(character==variable) |> select(scene_id) |> unique() |> pull()
list<- as.array(scene_character)


data <- unique_avatar_character_scene |> filter(scene_id %in% list,
                                                character != variable,
                                                character %in% cast) |> 
  select(character,scene_id,book) |> distinct()


data <- data |> 
  group_by(character,book) |> 
  summarise(frequency = n(),.groups = 'drop') |> 
  arrange(desc(frequency)) |> 
  ungroup()

colnames(data) <- c("character_2","book","frequency")
data <- cbind(character_1= variable,data)

data_alluvia <- rbind(data_alluvia,data)
}
data_alluvia

```
```{r,fig.height=10,fig.width=8}
library(ggalluvial)
interactions_alluvial<-
  ggplot(data_alluvia,aes(axis1=character_1,axis2=character_2,y=frequency))+
  geom_alluvium(color= "grey80",aes(fill=character_1))+
  #geom_alluvium()+
  geom_stratum()+
  geom_text(stat = "stratum",aes(label = after_stat(stratum)),size = 2)+
  facet_wrap(~ book,ncol = 2,scales = "free")+
  scale_x_discrete(limits=c("",""))+
  theme_avatar()+
  labs(title="Interactions between the main cast per book",
       y = "# of Scenes")+
  theme(legend.position = "none")

interactions_alluvial
ggsave("../images/graphs/interactions_alluvial.png", 
       plot = interactions_alluvial)
  
```
Just out of curiosity, lets find out how many times the cabbage merchant appears in the show

```{r}
characters<-unique_avatar_character$character |> unique()
characters[grepl("merchant", characters)]
```

```{r}
cabbage<-unique_avatar_character |> filter(character=='Cabbage merchant')
cabbage
```
```{r}
cabbage$chapter<-factor(cabbage$chapter, levels = c("The King of Omashu","The Waterbending Scroll","The Serpent's Pass","The Tales of Ba Sing Se"))
cabbage$book<-factor(cabbage$book,levels = c("Water","Earth","Fire"))
```

```{r}
cabbages<-ggplot(cabbage, aes(x = chapter,
                    y = length(character_words)*1.1, fill = book)) +
  geom_bar(stat = "identity", color = "black") +  # Stacked bars
  geom_text(aes(label = str_wrap(character_words, width = 15)), 
            position = position_stack(vjust = 0.5), 
            size = 2, 
            color = "white") +  # Add text inside stacks
  labs(
    title = "Appearances of the Cabbage Merchant",
    x = "Chapter",
    y = "Participations",
    fill = "Book"
  ) +
  scale_fill_manual(values=c("#6798DE","#73B067","#EA666D"))+
  theme_avatar() +
  theme(
    #axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
    axis.text.y = element_blank(),  # Remove y-axis text
    axis.ticks.y = element_blank(),  # Remove y-axis ticks
    panel.grid.major.y = element_blank()  # Remove y-axis grid lines
  )

cabbages
ggsave("../images/graphs/cabbages.png", 
       plot = cabbages)
```

